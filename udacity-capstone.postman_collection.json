{
	"info": {
		"_postman_id": "8db7b9ea-ce81-4f46-aafa-44664a93da51",
		"name": "udacity-capstone",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "public",
			"item": [
				{
					"name": "/users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 since no credentials are present\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "/users/1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 since no credentials are present\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "/users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 since no credentials are present\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Arturo Diaz\",\r\n    \"telephone\": \"997207077\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "/users/2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 since no credentials are present\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/users/2",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "/tags/2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 since no credentials are present\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/tags/2",
							"host": [
								"{{host}}"
							],
							"path": [
								"tags",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "/tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 since no credentials are present\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Melkor\",\r\n    \"information\": \"Perro cruzado, tamaño mediano\",\r\n    \"user_id\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/tags",
							"host": [
								"{{host}}"
							],
							"path": [
								"tags"
							]
						}
					},
					"response": []
				},
				{
					"name": "/tags/1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 since no credentials are present\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"information\": \"Perro cruzado, tamaño grande\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/tags/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"tags",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "/tags/1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 since no credentials are present\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"information\": \"Perro cruzado, tamaño grande\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/tags/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"tags",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "/qr/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"value contains qr info\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.tag).to.be.an('object')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/qr/ea290f48",
							"host": [
								"{{host}}"
							],
							"path": [
								"qr",
								"ea290f48"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "user",
			"item": [
				{
					"name": "/users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 since credentials are valid, but permission is not present\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "/users/1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 since credentials are valid, but permission is not present\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "/users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 since credentials are valid, but permission is not present\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Arturo Diaz\",\r\n    \"telephone\": \"997207077\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "/users/2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 since credentials are valid, but permission is not present\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/users/2",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "/tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"value contains created tag info\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.created).to.be.an('object') \r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"tag_id\", jsonData.created.id);\r",
									"postman.setEnvironmentVariable(\"qr_id\", jsonData.created.tag_id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Melkor\",\r\n    \"information\": \"Perro cruzado, tamaño mediano\",\r\n    \"user_id\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/tags",
							"host": [
								"{{host}}"
							],
							"path": [
								"tags"
							]
						}
					},
					"response": []
				},
				{
					"name": "/tags/<id>",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"value contains tag info\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.tag).to.be.an('object')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/tags/{{tag_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"tags",
								"{{tag_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/tags/<id>",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"value contains patched tag info\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.tag).to.be.an('object')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"information\": \"Perro cruzado, tamaño grande\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/tags/{{tag_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"tags",
								"{{tag_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/qr/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"value contains qr info\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.tag).to.be.an('object')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/qr/{{qr_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"qr",
								"{{qr_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/tags/<id>",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"value contains deleted tag info\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.delete).to.be.a('number')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"information\": \"Perro cruzado, tamaño grande\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/tags/{{tag_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"tags",
								"{{tag_id}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjFDd0JWckY0VHlfcG9GYzNLd2tlMSJ9.eyJpc3MiOiJodHRwczovL2Rldi0yd25hNDhmMy51cy5hdXRoMC5jb20vIiwic3ViIjoiYXV0aDB8NjIwYzk1ZDk2OGZhMzcwMDZhZGI2YzJmIiwiYXVkIjoidWRhY2l0eSIsImlhdCI6MTY0NDk5MjAxNCwiZXhwIjoxNjQ1MDc4NDE0LCJhenAiOiI3ZHROR0hVV0pnc0JCUjRCckpCRGlFYzZWT2doRGM3YSIsInNjb3BlIjoiIiwicGVybWlzc2lvbnMiOlsiZGVsZXRlOnRhZ3MiLCJnZXQ6dGFncyIsInBhdGNoOnRhZ3MiLCJwb3N0OnRhZ3MiXX0.jHV8VrnYM1e7Xbz2hfnu_-7IMYeyIGjE3Cy5HvdY5qND1C4OZBw-IGJTPEqBu4OmkrXnfyU7bW10h2k1R11EQvqvAX-50bkCOEbYxmlPlIxaSjBtTPJ13nI6nxyAhq0daANFQnzYOJRGb1_dnGZitPgAowtHQPKjDylwoGq0yOhcV21Mg41yJ5Vece576tgcSnVrwvCkZe-rRpaIr8-M4raCkfEK_iBDwBn3PC60pnnVgJUYeGPt2oJYVXhXJ_jhjMA-jUmE0PXFcWGqN2MuYhhYRgmY1XhA3iRqrTmh8-RwwclUhz6a3xrv5rmH9iC6d-uzIX-EhKWN-_a5mPf-eg",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "admin",
			"item": [
				{
					"name": "/users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"value contains created tag info\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.created).to.be.an('object') \r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"user_id\", jsonData.created.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Arturo Diaz\",\r\n    \"telephone\": \"997207077\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "/users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"value contains users array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.users).to.be.an('array')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users",
							"host": [
								"{{host}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "/users/<id>",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"value contains user info\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.user).to.be.an('object')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/users/{{user_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/users/<id>",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"value contains deleted user info\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.delete).to.be.a('number')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/users/{{user_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"value contains created tag info\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.created).to.be.an('object') \r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"tag_id\", jsonData.created.id);\r",
									"postman.setEnvironmentVariable(\"qr_id\", jsonData.created.tag_id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Melkor\",\r\n    \"information\": \"Perro cruzado, tamaño mediano\",\r\n    \"user_id\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/tags",
							"host": [
								"{{host}}"
							],
							"path": [
								"tags"
							]
						}
					},
					"response": []
				},
				{
					"name": "/tags/<id>",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"value contains tag info\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.tag).to.be.an('object')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/tags/{{tag_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"tags",
								"{{tag_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/tags/<id>",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"value contains patched tag info\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.tag).to.be.an('object')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"information\": \"Perro cruzado, tamaño grande\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/tags/{{tag_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"tags",
								"{{tag_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/qr/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"value contains qr info\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.tag).to.be.an('object')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/qr/{{qr_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"qr",
								"{{qr_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/tags/<id>",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"value contains deleted tag info\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.delete).to.be.a('number')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"information\": \"Perro cruzado, tamaño grande\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/tags/{{tag_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"tags",
								"{{tag_id}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjFDd0JWckY0VHlfcG9GYzNLd2tlMSJ9.eyJpc3MiOiJodHRwczovL2Rldi0yd25hNDhmMy51cy5hdXRoMC5jb20vIiwic3ViIjoiYXV0aDB8NjIwYzk1MzEwZTQwOGMwMDZhYjM5NThlIiwiYXVkIjoidWRhY2l0eSIsImlhdCI6MTY0NDk5MTg5NywiZXhwIjoxNjQ1MDc4Mjk3LCJhenAiOiI3ZHROR0hVV0pnc0JCUjRCckpCRGlFYzZWT2doRGM3YSIsInNjb3BlIjoiIiwicGVybWlzc2lvbnMiOlsiZGVsZXRlOnRhZ3MiLCJkZWxldGU6dXNlcnMiLCJnZXQ6dGFncyIsImdldDp1c2VycyIsInBhdGNoOnRhZ3MiLCJwb3N0OnRhZ3MiLCJwb3N0OnVzZXJzIl19.pWMTxHz4l-PDRwwwDL8NH_w8aPoWKYzCUNnlb6UiZIttJAEw3yuhB4zOplLXuD-LwqehOEVCTJCc18Zd4IfnKN0PdZxl-NPsb3uj_NRDKSgm40eK_FjamfG5_gBK9awPYpHzq7BInCRPrQib7tzZlXZsIs8YZRp_-fKEiwPzrAmbEnksES1-PUcTNqYppZf8bMZYgOi4Eg0t_c9smGuIXEY0q30TMUiJAiemcFbhJTBCLpUUuB5_Nu-leVnv0jug_ZkSYbRdfZZi00Q2U3vYubNlKAirrouvNeoI0i1TAd_uIJXyUXMB2BVh5IfkeN8D--k09Jm80Erpgd2HPovafQ",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	]
}